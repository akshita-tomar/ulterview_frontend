{"version":3,"file":"static/js/230.678754bd.chunk.js","mappings":"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","sources":["components/AssesmentPortal/CandidateAnsSheet.js"],"sourcesContent":["import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport emptylogo from './empty.gif'\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppContext } from '../../utils/useContext';\r\n\r\n\r\n\r\nconst CandidateAnswerSheet = () => {\r\n    let token = localStorage.getItem('token')\r\n    let url = process.env.REACT_APP_BACKEND_URL\r\n    let { id } = useParams()\r\n    const [originalQuesAns, setOriginalQuesAns] = useState([])\r\n    const [candidateResponse, setCandidateResponse] = useState([])\r\n    const [noResponse, setNoResponse] = useState(false)\r\n    const [OriginalQuesLength, setOriginalQuesLength] = useState(0)\r\n    const [candidateQuesAnsLength, setCandidateQuesAnsLength] = useState(0)\r\n    const [correctQuesLength, setCorrectQuesLength] = useState(0)\r\n    const [doneQuestions, setDoneQuestions] = useState({});\r\n    const divRefs = useRef([])\r\n    const navigate = useNavigate()\r\n\r\n\r\n    const scrollToDiv = (id) => {\r\n        divRefs.current[id]?.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    const handleMarkDone = (id, type) => {\r\n        setDoneQuestions((prev) => ({ ...prev, [id]: type }));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const count = Object.values(doneQuestions).filter(type => type === 'correct').length;\r\n        setCorrectQuesLength(count);\r\n    }, [doneQuestions]);\r\n\r\n\r\n    useEffect(() => {\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: myHeaders,\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`${url}get-dev-candidate-answers?candidatId=${id}`, requestOptions)\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                // console.log(result)\r\n                if (result.type === 'success') {\r\n                    setOriginalQuesAns(result.quesAns.providedQuesAns)\r\n                    setCandidateResponse(result.quesAns.retrivedQuesAns)\r\n                    setOriginalQuesLength(result.quesAns.providedQuesAns[0].logical.length + result.quesAns.providedQuesAns[0].objective.length + result.quesAns.providedQuesAns[0].subjective.length)\r\n                    setCandidateQuesAnsLength(result.quesAns.retrivedQuesAns.logical.length + result.quesAns.retrivedQuesAns.objective.length + result.quesAns.retrivedQuesAns.subjective.length)\r\n\r\n                }\r\n                if (result.quesAns.retrivedQuesAns.logical.length < 1 &&\r\n                    result.quesAns.retrivedQuesAns.objective.length < 1 &&\r\n                    result.quesAns.retrivedQuesAns.subjective.length < 1\r\n                ) {\r\n                    setNoResponse(true)\r\n                }\r\n            })\r\n            .catch((error) => console.error(error));\r\n    }, [])\r\n\r\n\r\n    const handleSubmit = () => {\r\n\r\n        const arrFromObj = Object.keys(doneQuestions);\r\n        if (arrFromObj.length < candidateQuesAnsLength) {\r\n            toast.error('Please check all the questions done by candidate')\r\n        } else {\r\n            const myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n            const raw = JSON.stringify({\r\n                \"candidateId\": id,\r\n                \"totalQuestions\": OriginalQuesLength,\r\n                \"totalCorrectQuestions\": correctQuesLength,\r\n                \"checkedAnswerSheet\": doneQuestions\r\n            });\r\n\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: myHeaders,\r\n                body: raw,\r\n                redirect: \"follow\"\r\n            };\r\n\r\n            fetch(`${url}addCheckedSheet`, requestOptions)\r\n                .then((response) => response.json())\r\n                .then((result) => {\r\n                    // console.log(result)\r\n                    if (result.type === 'success') {\r\n                        navigate('/candidates-performance')\r\n                    }\r\n                })\r\n                .catch((error) => console.error(error));\r\n        }\r\n    }\r\n\r\n\r\n    const { show } = useAppContext()\r\n\r\n    return (\r\n        <div className={`wrapper ${show ? \"cmn_margin\" : \"\"} `}>\r\n            <div className='check-result-header'>\r\n                {OriginalQuesLength}/{correctQuesLength}\r\n            </div>\r\n            <Container>\r\n                <Row>\r\n                    <Col lg={6} md={12} sm={12}  >\r\n                        <div className='original-ques-ans cmn_ques_outer'>\r\n                            <h3 className='heading'>Original Answers</h3>\r\n                            <hr></hr>\r\n                            <h3 className='heading-check-result'>Objective</h3>\r\n                            {originalQuesAns[0]?.objective?.map((questionAnswer, index) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)} >\r\n                                    <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                    <div className=\"options-wrapper\">\r\n                                        {questionAnswer.options.map((option, index) => (\r\n                                            <label className=\"option-label\" key={index}>\r\n                                                {option}\r\n                                            </label>\r\n                                        ))}\r\n                                    </div>\r\n                                    Correct Answer: {questionAnswer.correctAnswer}\r\n                                </div>\r\n                            ))}\r\n                            <h3 className='heading-check-result'>Subjective</h3>\r\n                            {originalQuesAns[0]?.subjective?.map((questionAnswer, index) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)}>\r\n                                    <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                    <textarea\r\n                                        className=\"text-input\"\r\n                                        placeholder=\"Your answer here\"\r\n                                        value={questionAnswer.answer}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                            <h3 className='heading-check-result'>Logical</h3>\r\n                            {originalQuesAns[0]?.logical?.map((questionAnswer, index) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)}>\r\n                                    <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                    <textarea\r\n                                        className=\"text-input\"\r\n                                        placeholder=\"Your answer here\"\r\n                                        value={questionAnswer.answer}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </Col>\r\n                    {/* candidate respone ------------------- */}\r\n                    <Col lg={6} md={12} sm={12}>\r\n                        <div className='candidate-ques-ans cmn_ques_outer' >\r\n                            <h3 className='heading'>Candidate Response</h3>\r\n                            <hr></hr>\r\n                            {\r\n                                candidateResponse?.objective?.length > 0 ? <h3 className='heading-check-result'>Objective</h3> : null\r\n                            }\r\n                            {candidateResponse?.objective?.map((questionAnswer, index) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                    <div className='d-flex align-items-center'>\r\n                                        <h3 className=\"question-text\">{questionAnswer.question} </h3>\r\n                                        {doneQuestions[questionAnswer._id] && (\r\n                                            <span className='done-text'>\r\n                                                {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"options-wrapper\">\r\n                                        {questionAnswer.options.map((option, index) => (\r\n                                            <label className=\"option-label\" key={index}>\r\n                                                {option}\r\n                                            </label>\r\n                                        ))}\r\n                                    </div>\r\n                                    Correct Answer: {questionAnswer.correctAnswer}\r\n                                    <div className='check-btn-outer'> <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>Check</button>\r\n                                        <button className='correct-opt' onClick={() => handleMarkDone(questionAnswer._id, 'correct')}>Correct</button>\r\n                                        <button className='incorrect-opt cmn_btn_color' onClick={() => handleMarkDone(questionAnswer._id, 'incorrect')}>Incorrect</button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {\r\n                                candidateResponse?.subjective?.length > 0 ? <h3 className='heading-check-result'>Subjective</h3> : null\r\n                            }\r\n\r\n                            {candidateResponse?.subjective?.map((questionAnswer, index) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                    <div className='d-flex align-items-center'>\r\n                                        <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                        {doneQuestions[questionAnswer._id] && (\r\n                                            <span className='done-text'>\r\n                                                {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                            </span>\r\n                                        )}\r\n\r\n\r\n                                    </div>\r\n                                    <textarea\r\n                                        className=\"text-input\"\r\n                                        placeholder=\"Your answer here\"\r\n                                        value={questionAnswer.answer}\r\n                                    />\r\n                                    <div className='check-btn-outer'>\r\n                                        <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>\r\n                                            Check</button>\r\n\r\n                                        <button className='correct-opt' onClick={() => handleMarkDone(questionAnswer._id, 'correct')}>Correct</button>\r\n                                        <button className=' cmn_btn_color' onClick={() => handleMarkDone(questionAnswer._id, 'incorrect')}>Incorrect</button>\r\n\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                            ))}\r\n                            {\r\n                                candidateResponse?.logical?.length > 0 ? <h3 className='heading-check-result'>Logical</h3> : null\r\n                            }\r\n\r\n                            {candidateResponse?.logical?.map((questionAnswer) => (\r\n                                <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                    <div className='d-flex align-items-center'>\r\n                                        <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                        {doneQuestions[questionAnswer._id] && (\r\n                                            <span className='done-text'>\r\n                                                {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                    </div>\r\n                                    <textarea\r\n                                        className=\"text-input\"\r\n                                        placeholder=\"Your answer here\"\r\n                                        value={questionAnswer.answer}\r\n                                    />\r\n                                    <div className='check-btn-outer'>\r\n                                        <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>Check</button>\r\n                                        <button className='correct-opt' onClick={() => handleMarkDone(questionAnswer._id, 'correct')}>Correct</button>\r\n                                        <button className='incorrect-opt cmn_btn_color' onClick={() => handleMarkDone(questionAnswer._id, 'incorrect')}>Incorrect</button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {\r\n                                candidateQuesAnsLength > 0 ? <button type=\"submit\" className=\"submit-button\" onClick={handleSubmit}>submit</button> : null\r\n                            }\r\n\r\n                            {\r\n                                noResponse && (\r\n                                    <div>\r\n                                        <img src={emptylogo} alt='loading...' height={'200px'} width={'200px'} />\r\n                                        <h5>This candidate not respond any question.</h5>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Toaster />\r\n        </div>\r\n    )\r\n}\r\nexport default CandidateAnswerSheet"],"names":["CandidateAnswerSheet","_originalQuesAns$","_originalQuesAns$$obj","_originalQuesAns$2","_originalQuesAns$2$su","_originalQuesAns$3","_originalQuesAns$3$lo","_candidateResponse$ob","_candidateResponse$ob2","_candidateResponse$su","_candidateResponse$su2","_candidateResponse$lo","_candidateResponse$lo2","token","localStorage","getItem","url","process","REACT_APP_BACKEND_URL","id","useParams","originalQuesAns","setOriginalQuesAns","useState","candidateResponse","setCandidateResponse","noResponse","setNoResponse","OriginalQuesLength","setOriginalQuesLength","candidateQuesAnsLength","setCandidateQuesAnsLength","correctQuesLength","setCorrectQuesLength","doneQuestions","setDoneQuestions","divRefs","useRef","navigate","useNavigate","scrollToDiv","_divRefs$current$id","current","scrollIntoView","behavior","handleMarkDone","type","prev","useEffect","count","Object","values","filter","length","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","concat","then","response","json","result","quesAns","providedQuesAns","retrivedQuesAns","logical","objective","subjective","catch","error","console","show","useAppContext","_jsxs","className","children","_jsx","Container","Row","Col","lg","md","sm","map","questionAnswer","index","ref","el","_id","question","options","option","correctAnswer","placeholder","value","answer","onClick","handleSubmit","keys","toast","body","JSON","stringify","src","emptylogo","alt","height","width","Toaster"],"sourceRoot":""}