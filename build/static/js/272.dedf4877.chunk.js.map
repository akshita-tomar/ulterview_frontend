{"version":3,"file":"static/js/272.dedf4877.chunk.js","mappings":"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","sources":["components/AssesmentPortal/CandidateCheckedSheet.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { toast, Toaster } from 'react-hot-toast'\r\nimport { useAppContext } from \"../../utils/useContext\";\r\n\r\n\r\nconst CheckedSheet = () => {\r\n    const { id } = useParams()\r\n    const divRefs = useRef([])\r\n    let token = localStorage.getItem('token')\r\n    let url = process.env.REACT_APP_BACKEND_URL\r\n    const [originalQuesAns, setOriginalQuesAns] = useState([])\r\n    const [candidateResponse, setCandidateResponse] = useState([])\r\n    const [OriginalQuesLength, setOriginalQuesLength] = useState(0)\r\n    const [correctQuesLength, setCorrectQuesLength] = useState(0)\r\n    const [doneQuestions, setDoneQuestions] = useState({});\r\n    const [checkedBy, setCheckedBy]=useState('')\r\n\r\n    const scrollToDiv = (id) => {\r\n        divRefs.current[id]?.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: myHeaders,\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`${url}get-dev-candidate-answers?candidatId=${id}`, requestOptions)\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                \r\n                setOriginalQuesAns(result.quesAns.providedQuesAns)\r\n                setCandidateResponse(result.quesAns.retrivedQuesAns)\r\n                setOriginalQuesLength(result.quesAns.providedQuesAns[0].logical.length + result.quesAns.providedQuesAns[0].objective.length + result.quesAns.providedQuesAns[0].subjective.length)\r\n                setDoneQuestions(result.quesAns.checkedAnswerSheet)\r\n                setCheckedBy(result.quesAns.checkedBy)\r\n                const checkedAnswerSheet = result.quesAns.checkedAnswerSheet; \r\n                const correctAnswersCount = Object.values(checkedAnswerSheet)\r\n                    .filter(answer => answer === 'correct') \r\n                    .length;\r\n                setCorrectQuesLength(correctAnswersCount)\r\n            })\r\n            .catch((error) => console.error(error));\r\n\r\n    }, [])\r\n\r\n    const{show}=useAppContext()\r\n\r\n    return (\r\n        <div className={`wrapper ${show ? \"cmn_margin\":\"\"}`}>\r\n            <div className='check-result-header'>\r\n            {correctQuesLength}/{OriginalQuesLength} checked by: {checkedBy}\r\n            </div>\r\n            <Container>\r\n                <Row>\r\n                    <Col lg={6} md={12} sm={12} >\r\n                        <div className=\"original-ques-ans p-3 cmn_ques_outer\">\r\n\r\n                        \r\n                        <div><h3>Original Answers</h3></div>\r\n                        <hr></hr>\r\n                        <h3 className='heading-check-result'>Objective</h3>\r\n                        {originalQuesAns[0]?.objective?.map((questionAnswer, index) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)} >\r\n                                <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                <div className=\"options-wrapper\">\r\n                                    {questionAnswer.options.map((option, index) => (\r\n                                        <label className=\"option-label\" key={index}>\r\n                                            {option}\r\n                                        </label>\r\n                                    ))}\r\n                                </div>\r\n                                Correct Answer: {questionAnswer.correctAnswer}\r\n                            </div>\r\n                        ))}\r\n                        <h3 className='heading-check-result'>Subjective</h3>\r\n                        {originalQuesAns[0]?.subjective?.map((questionAnswer, index) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)}>\r\n                                <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                <textarea\r\n                                    className=\"text-input\"\r\n                                    placeholder=\"Your answer here\"\r\n                                    value={questionAnswer.answer}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                        <h3 className='heading-check-result'>Logical</h3>\r\n                        {originalQuesAns[0]?.logical?.map((questionAnswer, index) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id} ref={(el) => (divRefs.current[questionAnswer._id] = el)}>\r\n                                <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                <textarea\r\n                                    className=\"text-input\"\r\n                                    placeholder=\"Your answer here\"\r\n                                    value={questionAnswer.answer}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                    </Col>\r\n                    {/* candidate respone ------------------- */}\r\n                    <Col lg={6} md={12} sm={12}>\r\n                        <div className='candidate-ques-ans p-3 cmn_ques_outer'> \r\n                        <div><h3>Candidate Response</h3></div>\r\n                        <hr></hr>\r\n                        {\r\n                            candidateResponse?.objective?.length > 0 ? <h3 className='heading-check-result'>Objective</h3> : null\r\n                        }\r\n\r\n                        {candidateResponse?.objective?.map((questionAnswer, index) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                <div className=\"d-flex align-items-center'\">\r\n                                <h3 className=\"question-text\">{questionAnswer.question} </h3>\r\n                                {doneQuestions[questionAnswer._id] && (\r\n                                    <span className='done-text'>\r\n                                        {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                    </span>\r\n                                )}\r\n                                \r\n                                </div>\r\n                                <div className=\"options-wrapper\">\r\n                                    {questionAnswer.options.map((option, index) => (\r\n                                        <label className=\"option-label\" key={index}>\r\n                                            {option}\r\n                                        </label>\r\n                                    ))}\r\n                                </div>\r\n                                Correct Answer: {questionAnswer.correctAnswer}\r\n                                <div className='check-btn-outer'> <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>\r\n                                    Check</button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        {\r\n                            candidateResponse?.subjective?.length > 0 ? <h3 className='heading-check-result'>Subjective</h3> : null\r\n                        }\r\n\r\n                        {candidateResponse?.subjective?.map((questionAnswer, index) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                <div className=\"d-flex align-items-center\">\r\n                                <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                {doneQuestions[questionAnswer._id] && (\r\n                                    <span className='done-text'>\r\n                                        {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                    </span>\r\n                                )}\r\n                                \r\n                                </div>\r\n                                <textarea\r\n                                    className=\"text-input\"\r\n                                    placeholder=\"Your answer here\"\r\n                                    value={questionAnswer.answer}\r\n                                />\r\n                                <div className='check-btn-outer'> <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>\r\n                                    Check</button>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        ))}\r\n                        {\r\n                            candidateResponse?.logical?.length > 0 ? <h3 className='heading-check-result'>Logical</h3> : null\r\n                        }\r\n\r\n                        {candidateResponse?.logical?.map((questionAnswer) => (\r\n                            <div className=\"question-wrapper-check-result\" key={questionAnswer._id}>\r\n                                <div className=\"d-flex align-items-center\">\r\n                                <h3 className=\"question-text\">{questionAnswer.question}</h3>\r\n                                {doneQuestions[questionAnswer._id] && (\r\n                                    <span className='done-text'>\r\n                                        {doneQuestions[questionAnswer._id] === 'correct' ? <p> &#10004;</p> : <p>&#10006;</p>}\r\n                                    </span>\r\n                                )}\r\n                                \r\n                                </div>\r\n                                <textarea\r\n                                    className=\"text-input\"\r\n                                    placeholder=\"Your answer here\"\r\n                                    value={questionAnswer.answer}\r\n                                />\r\n                                <div className='check-btn-outer'> <button className='check-button cmn_gray_btn' key={questionAnswer._id} onClick={() => scrollToDiv(questionAnswer._id)}>\r\n                                    Check</button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                     </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Toaster />\r\n        </div>\r\n    )\r\n}\r\nexport default CheckedSheet"],"names":["CheckedSheet","_originalQuesAns$","_originalQuesAns$$obj","_originalQuesAns$2","_originalQuesAns$2$su","_originalQuesAns$3","_originalQuesAns$3$lo","_candidateResponse$ob","_candidateResponse$ob2","_candidateResponse$su","_candidateResponse$su2","_candidateResponse$lo","_candidateResponse$lo2","id","useParams","divRefs","useRef","token","localStorage","getItem","originalQuesAns","setOriginalQuesAns","useState","candidateResponse","setCandidateResponse","OriginalQuesLength","setOriginalQuesLength","correctQuesLength","setCorrectQuesLength","doneQuestions","setDoneQuestions","checkedBy","setCheckedBy","scrollToDiv","_divRefs$current$id","current","scrollIntoView","behavior","useEffect","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","concat","process","then","response","json","result","quesAns","providedQuesAns","retrivedQuesAns","logical","length","objective","subjective","checkedAnswerSheet","correctAnswersCount","Object","values","filter","answer","catch","error","console","show","useAppContext","_jsxs","className","children","_jsx","Container","Row","Col","lg","md","sm","map","questionAnswer","index","ref","el","_id","question","options","option","correctAnswer","placeholder","value","onClick","Toaster"],"sourceRoot":""}