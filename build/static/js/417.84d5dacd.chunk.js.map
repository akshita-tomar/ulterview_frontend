{"version":3,"file":"static/js/417.84d5dacd.chunk.js","mappings":"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","sources":["components/homepage/createTask.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { MdOutlineArrowBack } from \"react-icons/md\"\r\n\r\n\r\n\r\nconst CreateTask = () => {\r\n\r\n  const navigate = useNavigate()\r\n  const [questionType, setQuestionType] = useState(localStorage.getItem('questionType')?localStorage.getItem('questionType'):'mcq');\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [options, setOptions] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [checkChange, setCheckChange] = useState(0)\r\n\r\n  let series = localStorage.getItem('series')\r\n\r\n\r\n  const url = process.env.REACT_APP_BACKEND_URL\r\n\r\n\r\n\r\n  const handleQuestionTypeChange = (type) => {\r\n    setQuestionType(type);\r\n  };\r\n\r\n\r\n\r\n  const handleOptionChange = (index, value) => {\r\n    const newOptions = [...options];\r\n    newOptions[index] = value;\r\n    setOptions(newOptions);\r\n  };\r\n\r\n\r\n\r\n  const handleAddQuestion = (e) => {\r\n    e.preventDefault()\r\n    // console.log(\"correct answer--\", correctAnswer)\r\n    if (question === '') {\r\n      toast.error(\"Please enter question.\", {\r\n        duration: 1300\r\n      })\r\n      return\r\n    }\r\n\r\n    if (questionType === 'mcq') {\r\n      const filteredOptions = options.filter(option => option.trim() !== \"\");\r\n      if (filteredOptions.length < 4) {\r\n        toast.error(\"Please enter all four options\", {\r\n          duration: 1300\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n\r\n    let token = localStorage.getItem('token')\r\n    let seriesId = localStorage.getItem('seriesId')\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n    const raw = JSON.stringify({\r\n      \"question\": question,\r\n      \"options\": options,\r\n      \"correctAnswer\": correctAnswer,\r\n      \"answer\": answer,\r\n\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    switch (questionType) {\r\n      case \"mcq\":\r\n\r\n        fetch(`${url}addObjective?seriesId=${seriesId}`, requestOptions)\r\n          .then((response) => response.json())\r\n          .then((result) => {\r\n            // console.log(result)\r\n            if (result.type === 'success') {\r\n              setQuestion('')\r\n              setOptions([\"\", \"\", \"\", \"\"]);\r\n              setCorrectAnswer('')\r\n              setCheckChange(prev => prev + 1)\r\n              navigate('/updateQuestions')\r\n            } else {\r\n              toast.error(result.message)\r\n            }\r\n\r\n          })\r\n          .catch((error) => console.error(error));\r\n        break;\r\n\r\n      case \"subjective\":\r\n\r\n        fetch(`${url}addSubjective?seriesId=${seriesId}`, requestOptions)\r\n          .then((response) => response.json())\r\n          .then((result) => {\r\n            // console.log(result)\r\n            if (result.type === 'success') {\r\n              setQuestion('')\r\n              setAnswer('')\r\n              setCheckChange(prev => prev + 1)\r\n              navigate('/updateQuestions')\r\n            } else {\r\n              toast.error(result.message)\r\n            }\r\n          })\r\n          .catch((error) => console.error(error));\r\n        break;\r\n\r\n      case \"logical\":\r\n\r\n        fetch(`${url}addLogical?seriesId=${seriesId}`, requestOptions)\r\n          .then((response) => response.json())\r\n          .then((result) => {\r\n            // console.log(result)\r\n            if (result.type === 'success') {\r\n              setQuestion('')\r\n              setAnswer('')\r\n              setCheckChange(prev => prev + 1)\r\n              navigate('/updateQuestions')\r\n            } else {\r\n              toast.error(result.message)\r\n            }\r\n          })\r\n          .catch((error) => console.error(error));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let series = localStorage.getItem('seriesId')\r\n    let token = localStorage.getItem('token')\r\n    if (!token) {\r\n      navigate('/')\r\n    }\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n      redirect: \"follow\"\r\n    };\r\n    fetch(`${url}getQuestionsSeriesWise?seriesId=${series}`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        // console.log(result)\r\n        if (result.type === 'error') {\r\n          // toast.error(result.message)\r\n        }\r\n      })\r\n      .catch((error) => console.error(error));\r\n\r\n  }, [series, checkChange])\r\n\r\n\r\n   const handleBackClick = () => {\r\n        navigate('/updateQuestions')\r\n    }\r\n\r\n\r\n    const getButtonClass = (type) => {\r\n      return questionType === type ? \"active-btn\" : \"\";\r\n    };\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <section className=\"createtask_wrapper wrapper\">\r\n    <div className=\"homepage-outer-div\">\r\n      <div className=\"back-btn me-2\" onClick={handleBackClick}>< MdOutlineArrowBack /></div>\r\n      {\r\n        // openmodal || series && (\r\n        series && (\r\n          <>\r\n           \r\n            {/* <div className=\"headings\"><h2 className=\"create-series-heading\"> Create test for {series} ({language}) </h2>\r\n            </div> */}\r\n            \r\n            <div className=\"test-box\">\r\n\r\n              {/* <div className=\"cross-sign\" onClick={closeTestModal}> <b>  &#10005; </b></div> */}\r\n              <div className=\"internal-testbox\">\r\n              <button onClick={() => handleQuestionTypeChange(\"mcq\")} className={`mcq-btn ${getButtonClass(\"mcq\")}`}>\r\n                Objective\r\n              </button>\r\n              <button onClick={() => handleQuestionTypeChange(\"subjective\")} className={`subjective-btn ${getButtonClass(\"subjective\")}`}>\r\n                Subjective\r\n              </button>\r\n              <button onClick={() => handleQuestionTypeChange(\"logical\")} className={`logical-btn ${getButtonClass(\"logical\")}`}>\r\n                Logical\r\n              </button>\r\n            </div>\r\n              {questionType === \"mcq\" && (\r\n                <div className=\"mcq-inputs\">\r\n                  <input className=\"mcq-question form-control mt-3\" type=\"text\" placeholder=\"Enter question\" value={question} onChange={(e) => setQuestion(e.target.value)} />\r\n                  {options.map((option, index) => (\r\n                    <input className=\"mcq-options form-control\" key={index} type=\"text\" placeholder={`Option ${index + 1}`} value={option} onChange={(e) => handleOptionChange(index, e.target.value)} />\r\n                  ))}\r\n                  <label className=\"new_series_label\">Select correct answer:</label>\r\n                  <select className=\"form-control mt-3\" value={correctAnswer} onChange={(e) => setCorrectAnswer(parseInt(e.target.value))}>\r\n                    <option defaultChecked ></option>\r\n                    {options.map((_, index) => (\r\n                      <option key={index} value={index + 1}>{index + 1}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n              {questionType === \"subjective\" && (\r\n                <div className=\"subjective-inputs\">\r\n                  <input type=\"text\" className=\"form-control mt-3\" placeholder=\"Enter subjective question\" value={question} onChange={(e) => setQuestion(e.target.value)} />\r\n                  <textarea className=\"testbox-textarea form-control mt-3\" type=\"text\" placeholder=\"Enter answer\" value={answer} onChange={(e) => setAnswer(e.target.value)} />\r\n                </div>\r\n              )}\r\n              {questionType === \"logical\" && (\r\n                <div className=\"logical-inputs mt-4\">\r\n                  <textarea type=\"text\" className=\"testbox-textarea-logical form-control mt-2\" placeholder=\"Enter logical question\" value={question} onChange={(e) => setQuestion(e.target.value)} />\r\n                  <textarea className=\"testbox-textarea form-control mt-4\" type=\"text\" placeholder=\"Enter answer\" value={answer} onChange={(e) => setAnswer(e.target.value)} />\r\n                </div>\r\n              )}\r\n              {questionType && (\r\n                <button onClick={handleAddQuestion} className=\"add-question-btn cmn_btn_color \">\r\n                  Add Question\r\n                </button>\r\n              )}\r\n            </div></>\r\n        )}\r\n      <Toaster />\r\n    </div>\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CreateTask;\r\n"],"names":["CreateTask","navigate","useNavigate","questionType","setQuestionType","useState","localStorage","getItem","question","setQuestion","options","setOptions","correctAnswer","setCorrectAnswer","answer","setAnswer","checkChange","setCheckChange","series","url","process","handleQuestionTypeChange","type","useEffect","token","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","concat","then","response","json","result","catch","error","console","getButtonClass","_jsx","className","children","_jsxs","onClick","handleBackClick","MdOutlineArrowBack","_Fragment","placeholder","value","onChange","e","target","map","option","index","handleOptionChange","newOptions","parseInt","defaultChecked","_","preventDefault","toast","duration","filter","trim","length","seriesId","body","JSON","stringify","prev","message","Toaster"],"sourceRoot":""}