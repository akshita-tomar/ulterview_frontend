{"version":3,"file":"static/js/98.6347f2d5.chunk.js","mappings":"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","sources":["components/hrScreening/hrRoundTest.js","utils/encryption.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { decryptId } from \"../../utils/encryption\"\r\nimport logo from \"../header/ultivic-logo.png\"\r\n\r\n\r\nconst HrRoundTest = () => {\r\n  let { id } = useParams()\r\n  var candidateID\r\n  const [showQuestions, setShowQuestions] = useState(false)\r\n  const [questions, setQuestions] = useState([])\r\n  const url = process.env.REACT_APP_BACKEND_URL\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [endTime, setEndTime] = useState(null);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [candidateuserId, setCandidateUserId] = useState('')\r\n  const [isCompleted,setIsCompleted]=useState('')\r\n  const [linkClickedCount,setLinkClickedCount]=useState()\r\n  const [change,setChange]=useState(0)\r\n  const [updatedAnswers, setUpdatedAnswers] = useState({\r\n    hrRoundAnswers: [],\r\n  });\r\n\r\n\r\n\r\n  const handleChange = (questionId, quesiton, value) => {\r\n    setUpdatedAnswers((prev) => {\r\n      const newObjectiveAnswers = prev.hrRoundAnswers.filter(ans => ans._id !== questionId);\r\n      newObjectiveAnswers.push({ _id: questionId, question: quesiton, answer: value });\r\n      return { ...prev, hrRoundAnswers: newObjectiveAnswers };\r\n    })\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const cleanedEncryptedId = id.startsWith(':') ? id.slice(1) : id;\r\n    const decryptedId = decryptId(decodeURIComponent(cleanedEncryptedId));\r\n    // console.log('decrypted id --', decryptedId)\r\n    candidateID = decryptedId\r\n    setCandidateUserId(decryptedId)\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\"\r\n    };\r\n    \r\n    fetch(`${url}getTestDetails?candidateId=${decryptedId}`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) =>{\r\n        // console.log('result ------------',result)\r\n        setIsCompleted(result.testStatus)\r\n        setLinkClickedCount(result.linkedClickedCount)\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, [id,change]);\r\n\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    if (startTime && !endTime) {\r\n      intervalId = setInterval(() => {\r\n        setElapsedTime(Date.now() - startTime);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(intervalId);\r\n  }, [startTime, endTime]);\r\n\r\n\r\n\r\n  const handleStart = () => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({\r\n      \"candidateId\": candidateuserId\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    fetch(`${url}startHrRound`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        // console.log(result)\r\n        if (result.type === 'success') {\r\n          const requestOptions = {\r\n            method: \"GET\",\r\n            redirect: \"follow\"\r\n          };\r\n\r\n          fetch(`${url}getHrRoundInterviewQues?candidateId=${candidateuserId}`, requestOptions)\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n              // console.log(result)\r\n              if (result.type === 'success') {\r\n                setQuestions(result.questions)\r\n                setStartTime(Date.now());\r\n                setShowQuestions(true)\r\n              }\r\n            })\r\n            .catch((error) => console.error(error));\r\n        }\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n\r\n  const handleSubmit = () => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({\r\n      \"candidateId\": candidateuserId,\r\n      \"answers\": updatedAnswers\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    fetch(`${url}addHrRoundCandidateAnswer`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        // console.log(result)\r\n        if(result.type==='success'){\r\n          setChange(prev=>prev+1)\r\n        }\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n\r\n\r\n  const formatTime = (time) => {\r\n    const hours = Math.floor(time / 3600000);\r\n    const minutes = Math.floor((time % 3600000) / 60000);\r\n    const seconds = Math.floor((time % 60000) / 1000);\r\n    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper-hr-round-caution\">\r\n      {\r\n        isCompleted === 'completed' || isCompleted === 'selected'||isCompleted === 'pending' || isCompleted === 'rejected' || linkClickedCount>0 ?\r\n          <div className=\"regards-message\">\r\n            <h3>Your interview result will be shared with you as soon as possible. <br></br> Thankyou!</h3>\r\n          </div> :\r\n          <div>\r\n            {\r\n              showQuestions === false ?\r\n                <>\r\n                  <div className=\"interview-caution\">\r\n                    <h5>Please read carefully</h5>\r\n                    <ol>\r\n                      <li>When you will click on the start button(given bellow) you will see list of interview questions and your timer will start automatically.</li>\r\n                      <li>Try to complete your test in the predefinded estimate time. ( minutes) </li>\r\n                      <li>When you will complete the test click on the submit button.</li>\r\n                      <li>You will get list of objective, subjective as well as logical questions</li>\r\n                      <li>link is one time openable you can not access it again after submitting so please be carefull during test.</li>\r\n                    </ol>\r\n                    <h6 className=\"regards\"> Best! <br></br>Ultivic Technologies</h6>\r\n                  </div>\r\n                  <div className=\"text-center mb-4\">\r\n                    <button className='timer-start' onClick={handleStart}>Start</button>\r\n                  </div>\r\n                </> :\r\n                <div>\r\n                  <div className=\"Interview_header\">\r\n                    <div className=\"d-flex align-items-center gap-3 Interview_header_content\">\r\n                      <img src={logo} height={\"40px\"} width={\"120px\"} className=\"logo_img\" />\r\n                      <h3>Good Luck for your Interview!</h3>\r\n                    </div>\r\n                    <div className=\"timer_outer\">\r\n                      {formatTime(elapsedTime)}\r\n                    </div>\r\n                  </div>\r\n                  {\r\n                    questions.map((ele, index) => {\r\n                      return (\r\n                        <>\r\n                          <div className=\"question-wrapper\" key={ele._id}>\r\n                            <h3 className=\"question-text\">{ele.question}</h3>\r\n                            <textarea\r\n                              className=\"text-input form-control\"\r\n                              placeholder=\"Your answer here\"\r\n                              onChange={(e) => handleChange(ele._id, ele.question, e.target.value)}\r\n                            // onPaste={handlePaste}\r\n                            />\r\n                          </div>\r\n                        </>\r\n                      )\r\n                    })\r\n                  }\r\n                  <div className=\"text-center\">\r\n                    <button type=\"submit\" className=\"submit-button\" onClick={handleSubmit}  >Submit</button>\r\n                  </div>\r\n                </div>\r\n            }\r\n          </div>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default HrRoundTest","import sjcl from 'sjcl';\r\n\r\nconst SECRET_KEY = 'your-secret-key';\r\n\r\nexport const encryptId = (id) => {\r\n  try {\r\n    const encrypted = sjcl.encrypt(SECRET_KEY, id);\r\n    // console.log(\"Encrypted ID---\", encrypted);\r\n    return encrypted;\r\n  } catch (e) {\r\n    console.error(\"Encryption error:\", e);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const decryptId = (cipherText) => {\r\n  try {\r\n    const decrypted = sjcl.decrypt(SECRET_KEY, cipherText);\r\n    // console.log(\"Decrypted ID---\", decrypted);\r\n    return decrypted;\r\n  } catch (e) {\r\n    console.error(\"Decryption error:\", e);\r\n    return null;\r\n  }\r\n};\r\n"],"names":["HrRoundTest","id","useParams","showQuestions","setShowQuestions","useState","questions","setQuestions","url","process","REACT_APP_BACKEND_URL","startTime","setStartTime","endTime","setEndTime","elapsedTime","setElapsedTime","candidateuserId","setCandidateUserId","isCompleted","setIsCompleted","linkClickedCount","setLinkClickedCount","change","setChange","updatedAnswers","setUpdatedAnswers","hrRoundAnswers","useEffect","cleanedEncryptedId","startsWith","slice","decryptedId","decryptId","decodeURIComponent","fetch","concat","method","redirect","then","response","json","result","testStatus","linkedClickedCount","catch","error","console","intervalId","setInterval","Date","now","clearInterval","_jsx","className","children","_jsxs","_Fragment","onClick","handleStart","myHeaders","Headers","append","requestOptions","headers","body","JSON","stringify","type","src","logo","height","width","time","hours","Math","floor","minutes","seconds","String","padStart","formatTime","map","ele","index","question","placeholder","onChange","e","handleChange","questionId","_id","quesiton","value","target","prev","newObjectiveAnswers","filter","ans","push","answer","handleSubmit","SECRET_KEY","encryptId","sjcl","cipherText"],"sourceRoot":""}