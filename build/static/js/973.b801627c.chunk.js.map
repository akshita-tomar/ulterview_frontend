{"version":3,"file":"static/js/973.b801627c.chunk.js","mappings":"qLAIA,MAgGA,EAhG4BA,KACxB,IAAIC,GAAWC,EAAAA,EAAAA,MACXC,EAAMC,oCACNC,EAAQC,aAAaC,QAAQ,SACjC,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAGvCG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,gBAAiB,UAAYb,GAE9C,MAAMc,EAAiB,CACnBC,OAAQ,MACRC,QAASL,EACTM,SAAU,UAGdC,MAAM,GAADC,OAAIrB,EAAG,wCAAAqB,OAAuChB,GAAMW,GACpDM,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IAEiB,YAAhBA,EAAOC,OACPlB,EAAaiB,EAAOlB,WACpBI,EAAWc,EAAOE,SACtB,IAEHC,OAAOC,GAAUC,QAAQD,MAAMA,IAAO,GAC5C,IAGH,MAAME,EAAeC,IACjB,MAAMnB,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,gBAAiB,UAAUb,GAE5C,MAKMc,EAAiB,CACrBC,OAAQ,OACRC,QAASL,EACToB,KARUC,KAAKC,UAAU,CACzB,YAAe9B,EACf,WAAc2B,IAOdb,SAAU,UAGZC,MAAM,GAADC,OAAIrB,EAAG,uBAAuBgB,GAChCM,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IAEY,YAAdA,EAAOC,MACN5B,EAAS,qBACb,IAED8B,OAAOC,GAAUC,QAAQD,MAAMA,IAAO,EAG7C,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAAC,oBAEhC/B,EAAUiC,KAAKC,IAEPF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC7BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,sBAAqBC,SAAEG,EAAIC,YADND,EAAIE,OAMtD,KAACJ,EAAAA,EAAAA,KAAA,UACFA,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAAC,uBACnC5B,EAAQ8B,KAAI,CAACC,EAAKG,KAEXL,EAAAA,EAAAA,KAAAM,EAAAA,SAAA,CAAAP,UACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,sBAAqBC,SAAEG,EAAIC,YACzCH,EAAAA,EAAAA,KAAA,YACIF,UAAU,0BACVS,YAAY,mBACZC,MAAON,EAAIO,WALoBP,EAAIE,UAWvDP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,UAAQb,KAAK,SAASW,UAAU,gBAAgBY,QAASA,IAAMlB,EAAY,YAAYO,SAAE,YACzFC,EAAAA,EAAAA,KAAA,UAAQb,KAAK,SAASW,UAAU,aAAaY,QAASA,IAAMlB,EAAY,YAAYO,SAAE,gBAGxF,C","sources":["components/HrRoundResponse/chekAnswers.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { Navigate, useParams } from \"react-router-dom\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nconst CheckHrRoundAnswers = () => {\r\n    let navigate = useNavigate()\r\n    let url = process.env.REACT_APP_BACKEND_URL\r\n    let token = localStorage.getItem('token')\r\n    const { id } = useParams()\r\n    const [questions, setQuestions] = useState([])\r\n    const [quesAns, setQuesAns] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: myHeaders,\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`${url}hrRoundCandidateAnswers?candidateId=${id}`, requestOptions)\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                // console.log(result)\r\n                if (result.type === 'success') {\r\n                    setQuestions(result.questions)\r\n                    setQuesAns(result.answers)\r\n                }\r\n            })\r\n            .catch((error) => console.error(error));\r\n    }, [])\r\n\r\n\r\n    const handleClick = (status) => {\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"Authorization\", \"Bearer \"+token);\r\n        \r\n        const raw = JSON.stringify({\r\n          \"candidateId\": id,\r\n          \"hrResponse\": status\r\n        });\r\n        \r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\"\r\n        };\r\n        \r\n        fetch(`${url}hrRoundSelectReject`, requestOptions)\r\n          .then((response) => response.json())\r\n          .then((result) =>{\r\n            // console.log(result)\r\n            if(result.type==='success'){\r\n                navigate('/hr-round-response')\r\n            }\r\n          })\r\n          .catch((error) => console.error(error));\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"hrcheckans-heading\">Asked questions</div>\r\n            {\r\n                questions.map((ele) => {\r\n                    return (\r\n                        <div className=\"question-wrapper\" key={ele._id}>\r\n                            <h3 className=\"question-text-inner\">{ele.question}</h3>\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            } <br></br>\r\n            <div className=\"hrcheckans-heading\">Candidate response</div>\r\n            {quesAns.map((ele, index) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"question-wrapper\" key={ele._id}>\r\n                            <h3 className=\"question-text-inner\">{ele.question}</h3>\r\n                            <textarea\r\n                                className=\"text-input form-control\"\r\n                                placeholder=\"Your answer here\"\r\n                                value={ele.answer}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n            })}\r\n            <div className=\"text-center\">\r\n                <button type=\"submit\" className=\"submit-button\" onClick={() => handleClick('selected')} >Select</button> \r\n                <button type=\"submit\" className=\"reject-btn\" onClick={() => handleClick('rejected')} >Reject</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default CheckHrRoundAnswers\r\n"],"names":["CheckHrRoundAnswers","navigate","useNavigate","url","process","token","localStorage","getItem","id","useParams","questions","setQuestions","useState","quesAns","setQuesAns","useEffect","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","concat","then","response","json","result","type","answers","catch","error","console","handleClick","status","body","JSON","stringify","_jsxs","className","children","_jsx","map","ele","question","_id","index","_Fragment","placeholder","value","answer","onClick"],"sourceRoot":""}